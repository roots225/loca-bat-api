// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  firstname String?
  lastname  String?

  email    String @unique
  password String

  role String

  phone   String?
  address String?
  avatar  String?

  owners    Owner[]
  tenants   Tenant[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Agency {
  id      Int     @id @default(autoincrement())
  name    String
  mobile  String
  phone   String?
  address String?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  owners    Owner[]
  employees Employee[]
  tenants   Tenant[]

  @@map("agencies")
}

model Owner {
  user_id Int @unique
  user User @relation(fields: [user_id], references: [id])

  agency_id Int @default(0)
  agency    Agency @relation(fields: [agency_id], references: [id])

  properties OwnerProperty[]

  @@map("owners")
}

model Employee {
  user_id Int @unique

  agency_id Int
  agency    Agency @relation(fields: [agency_id], references: [id])

  @@map("employees")
}

model Tenant {
  user_id Int @unique
  user User @relation(fields: [user_id], references: [id])

  properties TenantProperty[]

  agency_id Int
  agency    Agency @relation(fields: [agency_id], references: [id])

  @@map("tenants")
}

model Property {
  id          Int    @id @default(autoincrement())
  name        String
  type        String
  description String

  owner_id  Int?
  tenant_id Int?

  monthly_cost Decimal?

  rent_deposit Int @default(3)
  rent_advance Int @default(1)

  day_of_rent String?

  address String?
  photo   String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tenants TenantProperty[]
  owners OwnerProperty[]

  @@map("properties")
}

model OwnerProperty {
  id Int @id @default(autoincrement())
  owner_id Int
  owner Owner @relation(fields: [owner_id], references: [user_id])

  property_id Int
  property Property @relation(fields: [property_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("owner_properties")
}

model TenantProperty {
  id Int @id @default(autoincrement())
  tenant_id Int
  tenant Tenant @relation(fields: [tenant_id], references: [user_id])

  property_id Int
  property Property @relation(fields: [property_id], references: [id])

  enter_date DateTime
  leave_date DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("tenant_properties")
}

model Payment {
  id Int @id @default(autoincrement())
  amount Decimal
  status String

  tenant_id Int
  property_id Int
  start_period DateTime
  end_period DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  transactions Transaction[]

  @@map("payments")
}

model OwnerWithdraw {
  id Int @id @default(autoincrement())
  amount Decimal
  status String

  owner_id Int
  property_id Int
  start_period DateTime
  end_period DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("owner_withdraw")
}

model Transaction {
  id Int @id @default(autoincrement())
  amount Decimal
  status String
  type String

  property_id Int

  start_period DateTime
  end_period DateTime

  payment_method String

  payment_id Int
  payment Payment @relation(fields: [payment_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("transactions")
}